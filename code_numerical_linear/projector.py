# This is a program to show a special transformation called orthogonal projection in 3D space.
# We generate this projection by Q P_{2} Q^{*} 
# where Q is a unitary matrix and P_{2} is a projection matrix [I_{2} 0; 0 0 0].

# We draw the hyperpane generated by q_{1}, q_{2}, the first two columns of Q, 
# assume q_{1} = 1/sqrt(3)[1,1,1], q_{2} = [1/sqrt(2), -1/sqrt(2),  0] , q_{3} = [1/sqrt(6), 1/sqrt(6), -2/sqrt(6)].

# And we draw the projection of a point P = [2, 3, 4] onto the hyperplane.

import os
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define vectors q1, q2, q3
q1 = (1 / np.sqrt(3)) * np.array([1, 1, 1])
q2 = (1 / np.sqrt(2)) * np.array([1, -1, 0])
q3 = (1 / np.sqrt(6)) * np.array([1, 1, -2])

# Verify orthonormality
assert np.allclose(np.dot(q1, q1), 1)
assert np.allclose(np.dot(q2, q2), 1)
assert np.allclose(np.dot(q3, q3), 1)
assert np.allclose(np.dot(q1, q2), 0)
assert np.allclose(np.dot(q1, q3), 0)
assert np.allclose(np.dot(q2, q3), 0)

# Construct unitary matrix Q
Q = np.column_stack((q1, q2, q3))

# Define the projection matrix P2
P2 = np.diag([1, 1, 0])

# Compute the projection operator P
P = Q @ P2 @ Q.T

print("Projection matrix P:")
print(P)

# Define the point P_point
P_point = np.array([1, 2, 6])

# Compute the projection of P_point onto the hyperplane
P_proj = P @ P_point

print("Projection of P_point onto the hyperplane:", P_proj)

# Prepare data for the hyperplane
grid_size = np.linspace(-1, 6, 10)
X, Y = np.meshgrid(grid_size, grid_size)
Z = np.zeros_like(X)

# Generate the hyperplane using q1 and q2
for i in range(len(grid_size)):
    for j in range(len(grid_size)):
        # Solve the linear system to find alpha and beta
        A = np.array([[q1[0], q2[0]], [q1[1], q2[1]]])
        b = np.array([X[i, j], Y[i, j]])
        alpha, beta = np.linalg.solve(A, b)
        # Compute Z[i, j] using alpha and beta
        Z[i, j] = alpha * q1[2] + beta * q2[2]

# Plotting
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Plot the hyperplane
ax.plot_surface(X, Y, Z, color='cyan', alpha=0.5)

# Plot the original point
ax.scatter(P_point[0], P_point[1], P_point[2], color='red', label='Original Point')

# Plot the projected point
ax.scatter(P_proj[0], P_proj[1], P_proj[2], color='green', label='Projected Point')

# Draw a line connecting the original point and its projection
ax.plot([P_point[0], P_proj[0]], [P_point[1], P_proj[1]], [P_point[2], P_proj[2]], 'k--')

# Set labels and legend
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Orthogonal Projection onto Hyperplane')
ax.legend()

# Define the path to save the plot
script_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(script_dir)
save_dir = os.path.join(parent_dir, 'illustrations')

# Create the directory if it doesn't exist
os.makedirs(save_dir, exist_ok=True)

# Save the plot
save_path = os.path.join(save_dir, 'orthogonal_projection.png')
plt.savefig(save_path)

# Show the plots
plt.show()